{"name":"Lightpng","tagline":"PNG optimization tool for game graphics","body":"# lightpng PNG optimization tool for game graphics\r\n\r\n## Purpose of This Tool\r\n\r\nPNG file processing tool to use for texture in game.\r\n\r\n3D graphics API (OpenGL and DirectX) provides any efficiency texture formats\r\nlike RGBA5551, RGB565, RGBA444 and so on. They can save graphics' memory and\r\nimprove performance.\r\n\r\nAnd current gaming API supports PNG file for texture. But PNG doesn't support\r\nany 16 bit per pixel formats.\r\n\r\nThis program generates a color reducted PNG file with dithering and it uses\r\n16 bit color space only. It generates high quality PNG files by using\r\n`Floydâ€“Steinberg dithering <http://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering>`_\r\nalgorithm. So you can easy to create 16 bit texture from this file like it::\r\n\r\n\r\n    // if it has no alpha channel\r\n    png_byte  src[height][width * 3];\r\n    uint16_t  texture[height * width];\r\n    for (size_t y = 0; y < height; ++y)\r\n    {\r\n        for (size_t x = 0; x < width; ++x)\r\n        {\r\n            int r = src[y][x * 3];\r\n            int g = src[y][x * 3];\r\n            int b = src[y][x * 3];\r\n            texture[y * width + x] = static_cast<uint16_t>((r << 11) | (g << 5) | (b));\r\n        }\r\n    }\r\n\r\nPNG is east to handle for developers and designers. And the result PNG file become\r\nsmaller than the original PNG file. It will help many mobile game developers.\r\n\r\nngCore already supports RGBA4444 and RGB565 format. You can create 16bit ``GL2.Texture``\r\nfrom this PNG file directly.\r\n\r\n## How To Build\r\n\r\nIt needs following libraries, but these source code are bundled:\r\n\r\n* libpng\r\n* libz\r\n* jpeglib\r\n\r\nThis repository contains a build setting file of SCons. I tested on Mac OS X with MaccPorts environment,\r\nbut maybe work on any scons/gcc environment::\r\n\r\n   $ sudo port install scons \r\n   $ scons\r\n   $ ./lightpng input.png -16m output.png\r\n\r\nIf you have MinGW environment, you can build Win32 binary on your environment ::\r\n\r\n   $ sudo port install i386-mingw32-gcc scons\r\n   $ soncs --mingw32\r\n   $ wine lightpng.exe input.png -16m output.png\r\n\r\n## Usage\r\n\r\nUse this command like this::\r\n\r\n   $ lightpng [opt] input_image [output_options]\r\n\r\n``input_image`` can accept ``.png`` and ``.jpg`` file.\r\n\r\n### Options\r\n\r\n:-s, --skip: Skip PNG file size optimization.\r\n:-b, --benchmark: Display time to process.\r\n:-v, --verbose: Display compression result.\r\n:-h, --help: Show this message.\r\n\r\n### Output Options\r\n\r\n:-16m PATH: 16 bit PNG with 1 bit alpha (RGBA 5551). If source image doesn't have alpha, it generates RGB 565 PNG.\r\n:-16a PATH: 16 bit PNG with 4 bit alpha (RGBA 4444). If source image doesn't have alpha, it generates RGB 565 PNG.\r\n:-16 PATH: It is as same as ``-16a`` .\r\n:-32 PATH: 24/32 bit PNG. It tries several compression option and reduce file size.\r\n:-p16m PATH: Preview mode of ``-16m``.\r\n:-p16a PATH: Preview mode of ``-16a``.\r\n:-p16 PATH: Preview mode of ``-16``.\r\n\r\n## Texture Mode / Preview Mode\r\n\r\nIf you want to create final output, you should use texture mode.\r\nBut this file truncates unused bit, so it is not good for preview.\r\n\r\nFor example, RGBA 5551 format has only 1 bit for alpha channel. The solid color pixel's\r\nalpha value become transparent.\r\n\r\n**Before Convert**\r\n\r\n.. list-table::\r\n\r\n   - * R\r\n     * ``1100 0000``\r\n   - * G\r\n     * ``1111 1111``\r\n   - * B\r\n     * ``0000 1111``\r\n   - * A\r\n     * ``1111 1111``\r\n\r\n**After Convert**\r\n\r\n.. list-table::\r\n\r\n   - * R\r\n     * ``1100 0000``\r\n   - * G\r\n     * ``1111 1000``\r\n   - * B\r\n     * ``0000 1000``\r\n   - * A\r\n     * ``1000 0000``\r\n\r\nPreview mode completes the lack of this information. You can see final image on your favorite viewer.\r\n\r\n## License\r\n\r\nThis source code is released under MIT License.\r\n\r\n## Non-Open Source Version\r\n\r\nThis program experimentally supports compressed texture generation (pvr/atc). It needs PVRTexLib and/or AdrenoSDK. They are available here:\r\n\r\n* http://www.imgtec.com/powervr/insider/powervr-utilities.asp\r\n* http://developer.qualcomm.com/develop/\r\n\r\nAdrenoSDK is proveded in Windows execution. So you need wine to install and extract needed libraries/headers.\r\n\r\nTo create this version, set following flags to scons command:\r\n\r\n:--no-opensource: Enable Texture Compression format support\r\n:--PVRTexLib=DIR: Enable PVRTC Texture Compression convert/preview feature. Default is \"./PVRTexLib\".\r\n:--AdrenoSDK=DIR: Enable ATITC Texture Compression convert/preview feature. Default is \"~/.wine/drive_c/AdrenoSDK\".\r\n\r\nIt adds following output options:\r\n\r\n:-pvr PATH: 4 bpp PVRTC compressed texture file\r\n:-lpvr PATH: 4 bpp PVRTC compressed texture file with legacy format (version 2)\r\n:-ppvr PATH: Preview mode of PVRTC\r\n:-atc PATH: 8 bpp ATITC compressed texture file\r\n:-fatc PATH: 8 bpp ATITC compressed texture file with header information\r\n:-patc PATH: Preview mode of PVRTC\r\n\r\nIf you use this option, use this program for internal use. You can't distribute your modified source code and/or binary in public.\r\nIf you want to reuse my source code to your product, please sent me Amazon.com or Amazon.co.jp e-mail gift to my address (yoshiki at shibu.jp).\r\n\r\nI am reading the license of Ardeno SDK, but it maybe prohibit linking with open source tool (legal English is very difficult). If I find any good way to link with open source code, I will merge this code into main.\r\n\r\n.. note::\r\n\r\n   ``--no-opensource`` and ``--mingw32`` can not be enabled at the same time now.\r\n   Please anyone tell me how to use closed source .lib via mingw32.\r\n\r\n## Author\r\n\r\n:Copyright: Yoshiki Shibukawa (DeNA Co.,Ltd. / ngmoco:) LLC)\r\n:Contact: yshibukawa at ngmoco.com\r\n\r\n## Thanks\r\n\r\nThis source code is created by other many people's help. Including my family, friends of Python/Sphinx communitiy, coworkers (DeNA, ngmoco)\r\nand so on.\r\n\r\nI learned good dithering algorithm from Sc4Freak's blog (http://adtsai.blogspot.com/2011/03/high-quality-dithering-for-windows.html) and\r\nhis source code. My implementation is an improvement/portable version of his code.\r\n\r\nAnd thanks from Greg Roelofs (libpng author) and Jean-loup Gailly and Mark Adler (zlib authors), I can implement it in a day.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}